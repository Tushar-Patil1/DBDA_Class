DROP TABLE IF EXISTS `customers`;
create TABLE customers (
  customer_Id int(11) NOT NULL,
  First_Name varchar(50) NOT NULL,
  Last_Name varchar(50) NOT NULL,
  phone varchar(50) NOT NULL,
  creditLimit decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`customer_Id`)
  );
  
  insert  into customers(customer_Id,First_Name,Last_Name,phone,creditLimit) values 

(103,'Atelier','Schmitt','08-7896 6578','21000.00'),(112,'Signal','King','7025551838','71800.00'),
(114,'Ferguson','Peter','03-9520 4555','117300.00'),(119,'Labrune','Janine ','40.67.8555','118200.00'),
(121,'Bergulfsen','Jonas ','07-98 9555','81700.00'),(124,'Nelson','Susan','4155551450','210500.00'),
(125,'Piestrzeniewicz','Zbyszek ','(26) 642-7555','0.00'),(128,'Keitel','Roland','+49 69 66 90 2555','59700.00'),
(129,'Murphy','Julie','6505555787','64600.00'),(131,'Lee','Kwai','2125557818','114900.00'),
(141,'Freyre','Diego ','(91) 555 94 44','227600.00'),(144,'Berglund','Christina ','0921-12 3555','53100.00'),
(145,'Petersen','Jytte ','31 12 3555','83400.00'),(146,'Saveley','Mary ','78.32.5555','123900.00'),
(148,'Eric','Jecob','+65 221 7555','103800.00'),(151,'Young','Jeff','2125557413','138500.00');

DROP TABLE IF EXISTS `orders`;
CREATE TABLE orders(
  order_Id int(11) NOT NULL,
  order_Date date NOT NULL,
  shipped_Date date DEFAULT NULL,
  Deliver varchar(15) NOT NULL,
  customer_Id int(11) NOT NULL,
  PRIMARY KEY (order_Id),
  FOREIGN KEY (customer_Id) REFERENCES customers(customer_Id)
);

insert  into orders(order_Id,order_Date,shipped_Date,Deliver,customer_Id) values 
(10100,'2003-01-06','2003-01-13','Shipped',114),(10101,'2003-01-09','2003-01-18','Shipped',125),
(10102,'2003-01-10','2003-01-18','Shipped',129),(10103,'2003-01-29','2003-02-07','Shipped',121),
(10104,'2003-01-31','2003-02-09','Shipped',141),(10105,'2003-02-11','2003-02-21','Shipped',145);




Q)Write a Query  to add a column package_stat  to the table orders. 
alter table orders add column package_stat varchar(40);

Q)Write a Query to change the package_stat column of orders table with 'not available' for all orders. 
SET SQL_SAFE_UPDATES = 0;
update orders set package_stat = 'not availabe' where package_stat is null;



Q)Write a Query to delete a row from customers table where credit_limit is 0.00 
SET FOREIGN_KEY_CHECKS=0; -- to disable them
DELETE FROM customers WHERE creditlimit=0.00;
SET FOREIGN_KEY_CHECKS=1; -- to re-enable them


Write SELECT statements to achieve the following:

Q)Write a Query to display the first_name with the occurrence of ‘el’ in  the customers tables.

SELECT first_name FROM customers WHERE first_name REGEXP '^el';

Q)Write a Query to prepare a list with customer name ,customer_id ,order_id for the customers whose delivery status is shipped.

select c.First_Name,c.Last_Name,c.customer_Id,o.order_Id
from customers c 
join orders o
on c.customer_Id=o.customer_Id
where o.Deliver='Shipped';


Q)Write a Query to get the number of customers with the creditLimit greater than 50000.

select count(customer_id) from customers where creditLimit > 50000;


Q)Write a Query to display the customer_id, name ( first name and last name ), order_id and deliver for all customers.

select concat(c.First_Name,' ',c.Last_Name) as name,c.customer_Id,o.order_Id, o.Deliver
from customers c 
join orders o
on c.customer_Id=o.customer_Id;

Q)Write a Query to customer name in order of creditLimit smallest to highest.

select concat(first_name,' ',last_name) as name, creditLimit
from customers order by creditLimit asc;

Q)Write a stored procedure by name order_day. The procedure should show the customer_id and the day on which he had made the order. 

delimiter /
create procedure order_day ()
begin
select c.customer_id , o.order_Date from customers c JOIN orders o on c.customer_Id = o.customer_Id; 
end /
delimiter ;

call order_day();


Q)Write a stored function by the name of cutomer_search.  The stored function should return the maximum creditLimit made by any customer. 


delimiter /
create PROCEDURE customer_search (in cid int)
begin
select creditlimit from customers where customer_Id = cid;
end /
delimiter ;

call customer_search(119);

or
===

delimiter /
create PROCEDURE customer_search1 ()
begin
select max(creditlimit) from customers ;
end /
delimiter ;

call customer_search1 ();



#####################################################################
Create DEPT table with the following structure:-
DEPTNO	INT(2)
DNAME	VARCHAR (14)
LOC		VARCHAR (13)

Insert the following rows in DEPT table:-
      10, ACCOUNTING,NEW YORK
      20, RESEARCH, DALLAS
      30, SALES, CHICAGO
      40, OPERATIONS,  BOSTON

Create EMP table with the following structure:-
EMPNO	INT(4)
ENAME	VARCHAR (10)
JOB		VARCHAR (9)
HIREDATE	DATE
SAL		FLOAT(7,2)
COMM	FLOAT(7,2)
DEPTNO	INT(2)

Insert the following rows in EMP table:-
  7369, SMITH, CLERK, 17-DEC-80, 800, null, 20
  7499, ALLEN, SALESMAN, 20-FEB-81, 1600, 300, 30
  7521, WARD, SALESMAN, 22-FEB-81, 1250, 500, 30
  7566, JONES, MANAGER, 02-APR-81, 2975, null, 20
  7654, MARTIN, SALESMAN, 28-SEP-81, 1250, 1400, null, 30
  7698, BLAKE, MANAGER, 01-MAY-81, 2850, null, 30
  7782,, CLARK, MANAGER, 09-JUN-81, 2450, null, 10
  7788, SCOTT, ANALYST, 09-DEC-82, 3000, null, 20
  7839, KING, PRESIDENT, 17-NOV-81, 5000, null, 10
  7844, TURNER, SALESMAN, 08-SEP-81, 1500, 0, 30
  7876, ADAMS, CLERK, 12-JAN-83, 1100, null, 20
  7900, JAMES, CLERK, 03-DEC-81, 950, null, 30
  7902, FORD, ANALYST, 03-DEC-81, 3000, null, 20
  7934, MILLER, CLERK, 23-JAN-82, 1300, null, 10

=================================================
create table dept(
deptno int(2),
dname varchar(14),
loc varchar(13)
);

insert into dept values (10,'accounting', 'new york');
insert into dept values (20, 'RESEARCH', 'DALLAS');
insert into dept values (30, 'SALES', 'CHICAGO');
insert into dept values  (40, 'OPERATIONS',  'BOSTON');


create table emp(
EMPNO INT(4),
ENAME VARCHAR (10),
JOB VARCHAR (9),
HIREDATE DATE,
SAL FLOAT(7,2),
COMM FLOAT(7,2),
DEPTNO INT(2)
);



insert into emp values(7369, 'SMITH', 'CLERK', str_to_date('17-12-80 ','%d-%m-%y'), 800, null, 20);
insert into emp values(7499, 'ALLEN', 'SALESMAN', str_to_date('20-02-81','%d-%m-%y'), 1600, 300, 30);
insert into emp values(7521, 'WARD', 'SALESMAN', str_to_date('22-02-81','%d-%m-%y'), 1250, 500, 30);
insert into emp values(7566, 'JONES', 'MANAGER', str_to_date('02-04-81','%d-%m-%y'), 2975, null, 20);
insert into emp values(7654, 'MARTIN', 'SALESMAN', str_to_date('28-09-81','%d-%m-%y'), 1250, null, 30);
insert into emp values(7698, 'BLAKE', 'MANAGER', str_to_date('01-05-81','%d-%m-%y'), 2850, null, 30);
insert into emp values(7782, 'CLARK', 'MANAGER', str_to_date('09-06-81','%d-%m-%y'), 2450, null, 10);
insert into emp values(7788, 'SCOTT', 'ANALYST', str_to_date('09-12-82','%d-%m-%y'), 3000, null, 20);
insert into emp values(7839, 'KING', 'PRESIDENT', str_to_date('17-11-81','%d-%m-%y'), 5000, null, 10);
insert into emp values( 7844, 'TURNER', 'SALESMAN', str_to_date('08-09-81','%d-%m-%y'), 1500, 0, 30);
insert into emp values(7876, 'ADAMS', 'CLERK', str_to_date('12-01-83','%d-%m-%y'), 1100, null, 20);
insert into emp values(7900, 'JAMES', 'CLERK', str_to_date('03-12-81','%d-%m-%y'), 950, null, 30);
insert into emp values(7902, 'FORD', 'ANALYST', str_to_date('03-12-81','%d-%m-%y'), 3000, null, 20);
insert into emp values(7934, 'MILLER', 'CLERK', str_to_date('23-01-82','%d-%m-%y'), 1300, null, 10);

=================================================

Write SELECT statements to achieve the following:-
Q)Display only the EMPNO and ENAME columns from EMP table.


Q)Display all employees who are CLERKs and the MANAGERs.
select * from emp where job in ('clerk','manager');

Q)Display the ENAME and JOB for all employees who belong to the same DEPTNO as employee ‘KING’.
select ename, job from emp where deptno =(select deptno from emp where ename='KING');

Q)Find the names of all employees hired in the month of February (of any year).
select ename from emp where month(hiredate) =2;

Q)Display the employees in descending order of DEPTNO.
select * from emp order by deptno desc;

Q)Display the employee name and employee number of the employees with the headings as NUMBER and NAME.
select ename as 'Employee name', EMPNO as 'Employee number' from emp;

Q)Find the names of all employees who were hired on the last day of the month.

select ename,hiredate,last_day(hiredate) as lastday from emp where hiredate=last_day(hiredate);


Q)Find the name of the employee who is receiving the maximum salary.

select ename from emp where SAL = (select max(sal) from emp);


Q)Display the sum of SAL for all the employees belonging to DEPTNO 10.
select sum(sal) from emp where DEPTNO = 10 group by deptno;

Q)Display the rows where JOB column ends with the letter ‘T’.

select * from emp where job like '%t';

SELECT *,   
    ROW_NUMBER() OVER() AS row_num  
FROM emp where job like '%t';   


11.Write a stored procedure to convert a temperature in Fahrenheit (F) to its equivalent in Celsius (C). The required formula is:-  C= (F-32)*5/9
Insert the temperature in Centigrade into TEMPP table.  Calling program for the stored procedure need not be written.

Delimiter @@
Create procedure fahr_to_cel(in f decimal, out c decimal)
begin
select ((F-32)*5/9) into c;
end @@
Delimiter ;

call fahr_to_cel(98,@c);
select @c;


12. Write a stored function by the name of Num_cube.  The stored function should return the cube of a number ‘N’.  The number ‘N’ should be passed to the stored function as a parameter.  Calling program for the stored function need not be written. 





Q1 Create table employee,dept with following column  and insert given data

emp_id 
Name - character varying 
Age - Integer
hobbies character varying  
salary integer
address character varying  
zip integer

CONSTRAINT 
Emp_id  – Primary KEY
All columns not null
Salary should always greater than 0
Zip should be unique 


Dept 

 dept_id integer 
 dept_name character varying 
 e_id integer     
 manager character varying    

Constraints:
dept_id – Primary key
e_id   - Foreign key to employee table (emp_id)



INSERT FOLLOWING DATA TO EMPLOYEE 

1,mohit,23,dancing, 10000, Mumbai,500049,
2,aniket,27,painting, 20000, mumbai,500149,
3,ajay,31,singing, 35000, delhi,273008,
4,priyanka,42,dancing, 55000, delhi,123876,
5,deepika,26,dancing, 10000, delhi,500786,
6,saloni,28,singing, 50000, Mumbai,400149,
7,yash,34,photography, 40000, Mumbai,450049,
8,vinay,45,painting, 70000, Mumbai,273006;

Dept table data


1,ec,8, virat,
2,cs,7, sachin,
3,it,6, rahul,
4,it,5, rahul,
5,cs,4, sachin,
6,ec,3, virat,
7,ec,2, virat,
8,ec,1, virat

==================================

create table employee (
emp_id int not null,
ename varchar(40) not null,
age int not null,
hobbies varchar(40) not null,
salary int not null,
address varchar(40) not null,
zip int not null,
primary key (emp_id),
unique key (zip),
check (salary > 0)
);


create table dept2(
dept_id int,
dept_name varchar(40),
eid int,
manager varchar(40),
primary key (dept_id),
foreign key (eid) REFERENCES employee (emp_id)
);


insert into employee values (1,'mohit',23,'dancing', 10000, 'Mumbai',500049);
insert into employee values (2,'aniket',27,'painting', 20000, 'mumbai',500149);
insert into employee values (3,'ajay',31,'singing', 35000, 'delhi',273008);
insert into employee values (4,'priyanka',42,'dancing', 55000, 'delhi',123876);
insert into employee values (5,'deepika',26,'dancing', 10000, 'delhi',500786);
insert into employee values (6,'saloni',28,'singing', 50000, 'Mumbai',400149);
insert into employee values (7,'yash',34,'photography', 40000, 'Mumbai',450049);
insert into employee values (8,'vinay',45,'painting', 70000, 'Mumbai',273006);

insert into dept2 values 
(1,'ec',8, 'virat'),
(2,'cs',7, 'sachin'),
(3,'it',6, 'rahul'),
(4,'it',5, 'rahul'),
(5,'cs',4, 'sachin'),
(6,'ec',3, 'virat'),
(7,'ec',2, 'virat'),
(8,'ec',1, 'virat');


====================================
--Query to count No. of employees 
select count(emp_id) as no_of_employee from employee; 

--Query to get unique department of employees 
select distinct dept_id, eid from dept2;


--Query to get min,max,avg,sum of salary for all employees --get highest salary of an individual based on hobbies 
select min(salary), max(salary), avg(salary), sum(salary) 
from employee ;


Query for sum of salary where address starts with 'M' or 'd' 
select sum(salary)
from employee
where
salary in (select salary from employee
      where address like ('M%') or 
            address like ('d%'));


Get all employee  details with their department details 

select emp_id,ename,age,hobbies,salary,address,zip,dept_id,dept_name,manager
from employee e
join dept2 d on
e.emp_id = d.dept_id


QUERY TO FIND employees age between 20 and 30 


select * from employee
where age between 20 and 30;


function to return name,emp_id,dept_name,hobbies,age by passing manager name


Delimiter /
create procedure empdetails(IN manager varchar(30))
begin
select ename,emp_id,dept_name,hobbies,age from employee e 
join dept2 d on e.emp_id=d.eid where d.manager=manager;
end /
delimiter 

call empdetails ('sachin');

FUNCTION RETURNS BELOW DETAILS FROM EMPLOYEE AND DEPARTMENT TABLE 
by passing manager name 





CREATE MONGO DB COLLECTIONS with following details and insert data 
--DB = mongo exam
--Collection = assignment,inventory

--assigment data
   { item: "journal", qty: 25, tags: ["blank", "red"], size: { h: 14, w: 21, uom: "cm" } },
   { item: "mat", qty: 85, tags: ["gray"], size: { h: 27.9, w: 35.5, uom: "cm" } },
   { item: "mousepad", qty: 25, tags: ["gel", "blue"], size: { h: 19, w: 22.85, uom: "cm" } }

--inventory data
	{ item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] },
   { item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] },
   { item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] },
   { item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] },
   { item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] }


Q get assignment documents having tags = gray

Qget inventory details whose dim_cm > 10 , sorted by qty descending order and print only 3 dcouments

Q Create index on inventory in descending order of qty 


Q Query to aggregare sum of qty in inventory collection


Q query to update inventory collection item name where qty:75 and dim_cm > 22


